package com.jwtAuthentication.jwt.service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Service
public class JwtService {

    // Use a secure key generated by Keys.secretKeyFor() method
    private SecretKey secretKey = Keys.secretKeyFor(SignatureAlgorithm.HS256);

    public JwtService() {
        // If you still want to manually define a secret key, you can use the above method
        // but the default method handles it securely.
    }

    public String generateToken(String username,String role) {
        Map<String, Object> claims = new HashMap<>();

        claims.put("role", role);
        return Jwts.builder()
                .setClaims(claims)  // Correct method to set the claims
                .setSubject(username)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + (1000 * 60 * 60 * 10))) // Fixed expiration time
                .signWith(secretKey) // Signing the token with a secure key
                .compact();
    }

    public String extractUserName(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(secretKey)  // Set the signing key for verification
                .build()
                .parseClaimsJws(token)  // Parse the JWT and extract claims
                .getBody();  // Extract and return the body of the token
    }

    public boolean validateToken(String token, UserDetails userDetails) {
        final String userName = extractUserName(token);
        return (userName.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    private Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }
}
